# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include("cmake/cmkr.cmake" OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Variables
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
set(GFLAGS_USE_TARGET_NAMESPACE ON)
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -gfull")

project(remill-workshop)

# Packages
find_package(Z3 REQUIRED)

find_package(LLVM-Wrapper REQUIRED)

find_package(remill REQUIRED)

find_package(LIEF REQUIRED)

# Subdirectory: helpers
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/helpers")
else()
	set(CMAKE_FOLDER helpers)
endif()
add_subdirectory(helpers)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: hello
set(hello_SOURCES
	"src/hello.cpp"
	cmake.toml
)

add_executable(hello)

target_sources(hello PRIVATE ${hello_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${hello_SOURCES})

target_compile_features(hello PRIVATE
	cxx_std_20
)

target_link_libraries(hello PRIVATE
	LLVM-Wrapper
	remill
	remill_settings
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT hello)
endif()

# Target: remill-lift
set(remill-lift_SOURCES
	"src/remill-lift.cpp"
	cmake.toml
)

add_executable(remill-lift)

target_sources(remill-lift PRIVATE ${remill-lift_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${remill-lift_SOURCES})

target_compile_features(remill-lift PRIVATE
	cxx_std_20
)

target_link_libraries(remill-lift PRIVATE
	LLVM-Wrapper
	remill
	remill_settings
)

target_link_libraries(remill-lift PRIVATE
	LIEF::LIEF
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT remill-lift)
endif()

# Target: api-basics
set(api-basics_SOURCES
	"src/api-basics.cpp"
	cmake.toml
)

add_executable(api-basics)

target_sources(api-basics PRIVATE ${api-basics_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${api-basics_SOURCES})

target_compile_features(api-basics PRIVATE
	cxx_std_20
)

target_link_libraries(api-basics PRIVATE
	LLVM-Wrapper
	remill
	remill_settings
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT api-basics)
endif()

# Target: bc-tool
set(bc-tool_SOURCES
	"src/bc-tool.cpp"
	cmake.toml
)

add_executable(bc-tool)

target_sources(bc-tool PRIVATE ${bc-tool_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bc-tool_SOURCES})

target_compile_features(bc-tool PRIVATE
	cxx_std_20
)

target_link_libraries(bc-tool PRIVATE
	LLVM-Wrapper
	remill
	remill_settings
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT bc-tool)
endif()

# Target: bc-stats
set(bc-stats_SOURCES
	"src/bc-stats.cpp"
	cmake.toml
)

add_executable(bc-stats)

target_sources(bc-stats PRIVATE ${bc-stats_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bc-stats_SOURCES})

target_compile_features(bc-stats PRIVATE
	cxx_std_20
)

target_link_libraries(bc-stats PRIVATE
	LLVM-Wrapper
	remill
	remill_settings
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT bc-stats)
endif()

# Target: bc-demangle
set(bc-demangle_SOURCES
	"src/bc-demangle.cpp"
	cmake.toml
)

add_executable(bc-demangle)

target_sources(bc-demangle PRIVATE ${bc-demangle_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bc-demangle_SOURCES})

target_compile_features(bc-demangle PRIVATE
	cxx_std_20
)

target_link_libraries(bc-demangle PRIVATE
	LLVM-Wrapper
	remill
	remill_settings
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT bc-demangle)
endif()
